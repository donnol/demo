package main

import (
	"reflect"
	"testing"
)

func Test_solveNQueens(t *testing.T) {
	type args struct {
		n int
	}
	tests := []struct {
		name string
		args args
		want [][]string
	}{
		{name: "", args: args{n: 8}, want: [][]string{
			{"Q.......", "....Q...", ".......Q", ".....Q..", "..Q.....", "......Q.", ".Q......", "...Q...."},
			{"Q.......", ".....Q..", ".......Q", "..Q.....", "......Q.", "...Q....", ".Q......", "....Q..."},
			{"Q.......", "......Q.", "...Q....", ".....Q..", ".......Q", ".Q......", "....Q...", "..Q....."},
			{"Q.......", "......Q.", "....Q...", ".......Q", ".Q......", "...Q....", ".....Q..", "..Q....."},
			{".Q......", "...Q....", ".....Q..", ".......Q", "..Q.....", "Q.......", "......Q.", "....Q..."},
			{".Q......", "....Q...", "......Q.", "Q.......", "..Q.....", ".......Q", ".....Q..", "...Q...."},
			{".Q......", "....Q...", "......Q.", "...Q....", "Q.......", ".......Q", ".....Q..", "..Q....."},
			{".Q......", ".....Q..", "Q.......", "......Q.", "...Q....", ".......Q", "..Q.....", "....Q..."},
			{".Q......", ".....Q..", ".......Q", "..Q.....", "Q.......", "...Q....", "......Q.", "....Q..."},
			{".Q......", "......Q.", "..Q.....", ".....Q..", ".......Q", "....Q...", "Q.......", "...Q...."},
			{".Q......", "......Q.", "....Q...", ".......Q", "Q.......", "...Q....", ".....Q..", "..Q....."},
			{".Q......", ".......Q", ".....Q..", "Q.......", "..Q.....", "....Q...", "......Q.", "...Q...."},
			{"..Q.....", "Q.......", "......Q.", "....Q...", ".......Q", ".Q......", "...Q....", ".....Q.."},
			{"..Q.....", "....Q...", ".Q......", ".......Q", "Q.......", "......Q.", "...Q....", ".....Q.."},
			{"..Q.....", "....Q...", ".Q......", ".......Q", ".....Q..", "...Q....", "......Q.", "Q......."},
			{"..Q.....", "....Q...", "......Q.", "Q.......", "...Q....", ".Q......", ".......Q", ".....Q.."},
			{"..Q.....", "....Q...", ".......Q", "...Q....", "Q.......", "......Q.", ".Q......", ".....Q.."},
			{"..Q.....", ".....Q..", ".Q......", "....Q...", ".......Q", "Q.......", "......Q.", "...Q...."},
			{"..Q.....", ".....Q..", ".Q......", "......Q.", "Q.......", "...Q....", ".......Q", "....Q..."},
			{"..Q.....", ".....Q..", ".Q......", "......Q.", "....Q...", "Q.......", ".......Q", "...Q...."},
			{"..Q.....", ".....Q..", "...Q....", "Q.......", ".......Q", "....Q...", "......Q.", ".Q......"},
			{"..Q.....", ".....Q..", "...Q....", ".Q......", ".......Q", "....Q...", "......Q.", "Q......."},
			{"..Q.....", ".....Q..", ".......Q", "Q.......", "...Q....", "......Q.", "....Q...", ".Q......"},
			{"..Q.....", ".....Q..", ".......Q", "Q.......", "....Q...", "......Q.", ".Q......", "...Q...."},
			{"..Q.....", ".....Q..", ".......Q", ".Q......", "...Q....", "Q.......", "......Q.", "....Q..."},
			{"..Q.....", "......Q.", ".Q......", ".......Q", "....Q...", "Q.......", "...Q....", ".....Q.."},
			{"..Q.....", "......Q.", ".Q......", ".......Q", ".....Q..", "...Q....", "Q.......", "....Q..."},
			{"..Q.....", ".......Q", "...Q....", "......Q.", "Q.......", ".....Q..", ".Q......", "....Q..."},
			{"...Q....", "Q.......", "....Q...", ".......Q", ".Q......", "......Q.", "..Q.....", ".....Q.."},
			{"...Q....", "Q.......", "....Q...", ".......Q", ".....Q..", "..Q.....", "......Q.", ".Q......"},
			{"...Q....", ".Q......", "....Q...", ".......Q", ".....Q..", "Q.......", "..Q.....", "......Q."},
			{"...Q....", ".Q......", "......Q.", "..Q.....", ".....Q..", ".......Q", "Q.......", "....Q..."},
			{"...Q....", ".Q......", "......Q.", "..Q.....", ".....Q..", ".......Q", "....Q...", "Q......."},
			{"...Q....", ".Q......", "......Q.", "....Q...", "Q.......", ".......Q", ".....Q..", "..Q....."},
			{"...Q....", ".Q......", ".......Q", "....Q...", "......Q.", "Q.......", "..Q.....", ".....Q.."},
			{"...Q....", ".Q......", ".......Q", ".....Q..", "Q.......", "..Q.....", "....Q...", "......Q."},
			{"...Q....", ".....Q..", "Q.......", "....Q...", ".Q......", ".......Q", "..Q.....", "......Q."},
			{"...Q....", ".....Q..", ".......Q", ".Q......", "......Q.", "Q.......", "..Q.....", "....Q..."},
			{"...Q....", ".....Q..", ".......Q", "..Q.....", "Q.......", "......Q.", "....Q...", ".Q......"},
			{"...Q....", "......Q.", "Q.......", ".......Q", "....Q...", ".Q......", ".....Q..", "..Q....."},
			{"...Q....", "......Q.", "..Q.....", ".......Q", ".Q......", "....Q...", "Q.......", ".....Q.."},
			{"...Q....", "......Q.", "....Q...", ".Q......", ".....Q..", "Q.......", "..Q.....", ".......Q"},
			{"...Q....", "......Q.", "....Q...", "..Q.....", "Q.......", ".....Q..", ".......Q", ".Q......"},
			{"...Q....", ".......Q", "Q.......", "..Q.....", ".....Q..", ".Q......", "......Q.", "....Q..."},
			{"...Q....", ".......Q", "Q.......", "....Q...", "......Q.", ".Q......", ".....Q..", "..Q....."},
			{"...Q....", ".......Q", "....Q...", "..Q.....", "Q.......", "......Q.", ".Q......", ".....Q.."},
			{"....Q...", "Q.......", "...Q....", ".....Q..", ".......Q", ".Q......", "......Q.", "..Q....."},
			{"....Q...", "Q.......", ".......Q", "...Q....", ".Q......", "......Q.", "..Q.....", ".....Q.."},
			{"....Q...", "Q.......", ".......Q", ".....Q..", "..Q.....", "......Q.", ".Q......", "...Q...."},
			{"....Q...", ".Q......", "...Q....", ".....Q..", ".......Q", "..Q.....", "Q.......", "......Q."},
			{"....Q...", ".Q......", "...Q....", "......Q.", "..Q.....", ".......Q", ".....Q..", "Q......."},
			{"....Q...", ".Q......", ".....Q..", "Q.......", "......Q.", "...Q....", ".......Q", "..Q....."},
			{"....Q...", ".Q......", ".......Q", "Q.......", "...Q....", "......Q.", "..Q.....", ".....Q.."},
			{"....Q...", "..Q.....", "Q.......", ".....Q..", ".......Q", ".Q......", "...Q....", "......Q."},
			{"....Q...", "..Q.....", "Q.......", "......Q.", ".Q......", ".......Q", ".....Q..", "...Q...."},
			{"....Q...", "..Q.....", ".......Q", "...Q....", "......Q.", "Q.......", ".....Q..", ".Q......"},
			{"....Q...", "......Q.", "Q.......", "..Q.....", ".......Q", ".....Q..", "...Q....", ".Q......"},
			{"....Q...", "......Q.", "Q.......", "...Q....", ".Q......", ".......Q", ".....Q..", "..Q....."},
			{"....Q...", "......Q.", ".Q......", "...Q....", ".......Q", "Q.......", "..Q.....", ".....Q.."},
			{"....Q...", "......Q.", ".Q......", ".....Q..", "..Q.....", "Q.......", "...Q....", ".......Q"},
			{"....Q...", "......Q.", ".Q......", ".....Q..", "..Q.....", "Q.......", ".......Q", "...Q...."},
			{"....Q...", "......Q.", "...Q....", "Q.......", "..Q.....", ".......Q", ".....Q..", ".Q......"},
			{"....Q...", ".......Q", "...Q....", "Q.......", "..Q.....", ".....Q..", ".Q......", "......Q."},
			{"....Q...", ".......Q", "...Q....", "Q.......", "......Q.", ".Q......", ".....Q..", "..Q....."},
			{".....Q..", "Q.......", "....Q...", ".Q......", ".......Q", "..Q.....", "......Q.", "...Q...."},
			{".....Q..", ".Q......", "......Q.", "Q.......", "..Q.....", "....Q...", ".......Q", "...Q...."},
			{".....Q..", ".Q......", "......Q.", "Q.......", "...Q....", ".......Q", "....Q...", "..Q....."},
			{".....Q..", "..Q.....", "Q.......", "......Q.", "....Q...", ".......Q", ".Q......", "...Q...."},
			{".....Q..", "..Q.....", "Q.......", ".......Q", "...Q....", ".Q......", "......Q.", "....Q..."},
			{".....Q..", "..Q.....", "Q.......", ".......Q", "....Q...", ".Q......", "...Q....", "......Q."},
			{".....Q..", "..Q.....", "....Q...", "......Q.", "Q.......", "...Q....", ".Q......", ".......Q"},
			{".....Q..", "..Q.....", "....Q...", ".......Q", "Q.......", "...Q....", ".Q......", "......Q."},
			{".....Q..", "..Q.....", "......Q.", ".Q......", "...Q....", ".......Q", "Q.......", "....Q..."},
			{".....Q..", "..Q.....", "......Q.", ".Q......", ".......Q", "....Q...", "Q.......", "...Q...."},
			{".....Q..", "..Q.....", "......Q.", "...Q....", "Q.......", ".......Q", ".Q......", "....Q..."},
			{".....Q..", "...Q....", "Q.......", "....Q...", ".......Q", ".Q......", "......Q.", "..Q....."},
			{".....Q..", "...Q....", ".Q......", ".......Q", "....Q...", "......Q.", "Q.......", "..Q....."},
			{".....Q..", "...Q....", "......Q.", "Q.......", "..Q.....", "....Q...", ".Q......", ".......Q"},
			{".....Q..", "...Q....", "......Q.", "Q.......", ".......Q", ".Q......", "....Q...", "..Q....."},
			{".....Q..", ".......Q", ".Q......", "...Q....", "Q.......", "......Q.", "....Q...", "..Q....."},
			{"......Q.", "Q.......", "..Q.....", ".......Q", ".....Q..", "...Q....", ".Q......", "....Q..."},
			{"......Q.", ".Q......", "...Q....", "Q.......", ".......Q", "....Q...", "..Q.....", ".....Q.."},
			{"......Q.", ".Q......", ".....Q..", "..Q.....", "Q.......", "...Q....", ".......Q", "....Q..."},
			{"......Q.", "..Q.....", "Q.......", ".....Q..", ".......Q", "....Q...", ".Q......", "...Q...."},
			{"......Q.", "..Q.....", ".......Q", ".Q......", "....Q...", "Q.......", ".....Q..", "...Q...."},
			{"......Q.", "...Q....", ".Q......", "....Q...", ".......Q", "Q.......", "..Q.....", ".....Q.."},
			{"......Q.", "...Q....", ".Q......", ".......Q", ".....Q..", "Q.......", "..Q.....", "....Q..."},
			{"......Q.", "....Q...", "..Q.....", "Q.......", ".....Q..", ".......Q", ".Q......", "...Q...."},
			{".......Q", ".Q......", "...Q....", "Q.......", "......Q.", "....Q...", "..Q.....", ".....Q.."},
			{".......Q", ".Q......", "....Q...", "..Q.....", "Q.......", "......Q.", "...Q....", ".....Q.."},
			{".......Q", "..Q.....", "Q.......", ".....Q..", ".Q......", "....Q...", "......Q.", "...Q...."},
			{".......Q", "...Q....", "Q.......", "..Q.....", ".....Q..", ".Q......", "......Q.", "....Q..."},
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := solveNQueens(tt.args.n); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("solveNQueens() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Benchmark_solveNQueens(b *testing.B) {
	for i := 0; i < b.N; i++ {
		solveNQueens(8)
	}
}
